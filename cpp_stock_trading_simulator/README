*--------------------------------------*
Author Name: Zining Zhu

*--------------------------------------*
*--------------------------------------*
Project Overview:
In this project, I successfully designed and implemented a program to simulate a stock trading system using UNIX socket programming on Ubuntu 22.04 ARM64. The system consists of client interfaces, a main server (Server M), and three backend servers (Server A for user authentication, Server P for portfolio management, and Server Q for stock quotes). The system ensures data consistency across multiple clients and correctly handles price advancement and profit/loss calculations. Users can securely log in using encrypted passwords, view real-time stock quotes, buy and sell stocks, and check their portfolio positions. 

Communication between clients and Server M is handled over TCP, while interactions between Server M and the three backend servers are conducted over UDP. 

In the boot-up phase, Server M should be initialized first. Once the three backend servers are activated, they respectively load one of the three input files ("members.txt", "portfolios.txt", and "quotes.txt") into the system to build up a database for later use. After a user successfully logs in, every command issued through the client is first forwarded to Server M, which then delegates tasks to the appropriate backend servers based on the user command. Every system operation on the client side and the servers produces some appropriate on-screen messages to make the whole process visible to the users. All servers persistently would remain active until manually terminated by the user.

*--------------------------------------*
*--------------------------------------*
Description of source code files: 
(1) client.cpp: This file implements the client interface that users interact with, connecting to Server M via TCP connections.

(2) serverM.cpp: This file implements the main server connecting to clients over TCP and to the three backend servers A, P, and Q over UDP. Server M functions as the central controller to handle users' commands sent from clients and then assign different tasks to the three backend servers. This main server is responsible for encrypting users' passwords in the authentication phase and calculating the profit/loss for "position" commands based on the users' portfolios.

(3) serverA.cpp: This file implements the authentication server to authenticate users against its stored credentials before users can access the other functions of this stock trading system. 

(4) serverP.cpp: This file implements the portfolio server to manage user portfolios, which for each user maintains a list of stock information containing the ticker name, the number of shares held, and the average buy price of each stock in the user's portfolio. For approved "buy" and "sell" commands, Server P is responsible for updating the users' portfolios. 

(5) serverQ.cpp: This file implements the quote server to manage and report stock price data. In the boot-up phase, a list of stocks with their corresponding prices at different times is uploaded to this server. Server Q is responsible for keeping a record of the current price for each stock. For every successful and unsuccessful "buy" and "sell" commands issued by the user, Server Q needs to update the current prices of stocks involved in those commands. 

(6) utility.h: This file contains header file inclusions and macro definitions used throughout the project. It also defines a generic function for setting up a UDP socket for each of the four servers.

*--------------------------------------*
*--------------------------------------*
Formats of exchanged messages: In the following part, client, Server M, Server A, P, and Q are respectively denoted by C, M, A, P, and Q, e.g., C->M means client sends to Server M.
(1) For authentication:
	C->M	authentication request format: "<username>,<password>"
	M->A	forwarded authentication request format: "<client port number>:<username>,<encrypted password>"
	A->M	authentication result format for success: "<client port number>:s"
					     for failure: "<client port number>:f"
	M->C	forwarded authentication result format for success: "s"
						       for failure: "f"

(2) For <quote> command:
	C->M	general quote request format: "qALL_STOCK"
	M->Q	forwarded general quote request format: "<client port number>:ALL_STOCK"
	Q->M	quote result format: "<client port number>:<stock name 1><space><price 1>\n<stock name 2><space><price 2>\n<stock name 3><space><price 3>\n..."
	M->C	forwarded quote result format: "<stock name 1><space><price 1>\n<stock name 2><space><price 2>\n<stock name 3><space><price 3>\n..."

(3) For <quote <stock name>> command:
	C->M	specific quote request format: "q<stock name>"
	M->Q	forwarded specific quote request format: "<client port number>:<stock name>"
	Q->M	quote result format: if the stock exists, "<client port number>:<stock name><space><price>"
				     if the stock does not exist, "<client port number>:NOT_EXIST"
	M->C	forwarded quote result format: if the stock exists, "<stock name><space><price>"
					       if the stock does not exist, "NOT_EXIST"

(4) For <buy <stock name> <number of shares>> command:
	C->M	buy request format: "b<stock name>,<number of shares>"
	M->Q	quote request format: "<client port number>:<stock name>"
	Q->M	quote result format: if the stock exists, "<client port number>:<stock name><space><price>"
				     if the stock does not exist, "<client port number>:NOT_EXIST"
	M->C	buy confirmation message format: if the stock exists, "<price>"
					     if the stock does not exist, "NOT_EXIST"
	C->M	buy confirmation response format: if yes, "Y"
					      if no, "N"
	M->P	approved buy request format: "<client port number>:b<username>|<stock name>,<number of shares>_<price>"
	P->M	buy result format: "<client port number>:s"
	M->C	forwarded buy result format: "s"
	M->Q	time shift request format: "<client port number>:+<stock name>"

(5) For <sell <stock name> <number of shares>> command:
	C->M	sell request format: "s<stock name>,<number of shares>"
	M->Q	quote request format: "<client port number>:<stock name>"
	Q->M	quote result format: if the stock exists, "<client port number>:<stock name><space><price>"
				     if the stock does not exist, "<client port number>:NOT_EXIST"
	M->C	if the stock does not exist, forwarded quote result format: "NOT_EXIST"
	M->P	if the stock exists, check shares request format: "<client port number>:s<username>|<stock name>,<number of shares>"
	P->M	if the number of held shares are sufficient, result format: "<client port number>:SUFF"
		if the number of held shares are not sufficient, result format: "<client port number>:NOT_SUFF"
	M->C	if the number of held shares are sufficient, sell confirmation message format: "<price>"
		if the number of held shares are not sufficient, result format: "NOT_SUFF"
	C->M	if the number of held shares are sufficient, sell confirmation response format: if yes, "Y"
												if no, "N"
	M->P	if yes, confirmed sell request format: "<client port number>:S_CONFIRMED"
		if no, denied sell request format: "<client port number>:S_DENIED"
	P->M	if sale succeeded, sale result format: "<client port number>:s"
	M->C	if sale succeeded, forwarded sale result format: "s"
	M->Q	if the stock exists, time shift request format: "<client port number>:+<stock name>"

(6) For <position> command:
	C->M	position request format: "p"
	M->P	forwarded position request format: "<client port number>:p<username>"
	P->M	returned portfolio format: "<client port number>:<stock name 1><space><number of shares 1><space><average buy price 1>\n<stock name 2><space><number of shares 2><space><average buy price 2>\n..."
	M->Q	quote request for the list of stocks format: "<client port number>:p<stock name 1><space><stock name 2><space><stock name 3>..."
	Q->M	quote result format: "<client port number>:<price 1><space><price 2><space><price 3>..."
	M->C	portfolio with profit format: "profit|<stock name 1><space><number of shares 1><space><average buy price 1>\n<stock name 2><space><number of shares 2><space><average buy price 2>\n..."

*--------------------------------------*
*--------------------------------------*
Idiosyncrasy: 

Server M must be started before any clients begin running. Otherwise, the TCP connections between the clients and Server M would fail to be established.

*--------------------------------------*
*--------------------------------------*
Reused/Cited Code: 
The following functions or code snippets are cited from Beej's Guide to Network Programming:
	(1) In serverM.cpp: the setupTCP() function, and a snippet of code for reaping all dead processes in the main() function. 

	(2) In client.cpp: the code snippet for setting up TCP connection to Server M in the main() function.

	(3) In utility.h: the sigchld_handler(int s) function, and the setupUDP(char serverName, const char* portNum) function.

*--------------------------------------*
*--------------------------------------*
Ubuntu 22.04 ARM64 is used as the environment for developing and running this project.

*--------------------------------------*
